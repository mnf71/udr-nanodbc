SET TERM ^ ;

CREATE OR ALTER PACKAGE NANO$CONN
AS
BEGIN

  /*  Note:
        CHARACTER SET UTF8
        attr VARCHAR(512) CHARACTER SET UTF8 DEFAULT NULL
        ...
        CHARACTER SET WIN1251
        attr VARCHAR(2048) CHARACTER SET WIN1251 DEFAULT NULL
   */

  FUNCTION connection(
      attr VARCHAR(512) CHARACTER SET UTF8 DEFAULT NULL,
      user_ VARCHAR(63) CHARACTER SET UTF8 DEFAULT NULL,
      pass VARCHAR(63) CHARACTER SET UTF8 DEFAULT NULL,
      timeout INTEGER NOT NULL DEFAULT 0
    ) RETURNS TY$POINTER;

  FUNCTION valid(conn TY$POINTER NOT NULL) RETURNS BOOLEAN;

  FUNCTION release_(conn TY$POINTER NOT NULL) RETURNS TY$POINTER;
  FUNCTION expunge(conn ty$pointer NOT NULL) RETURNS TY$NANO_BLANK;

  FUNCTION allocate(conn ty$pointer NOT NULL) RETURNS TY$NANO_BLANK;
  FUNCTION deallocate(conn ty$pointer NOT NULL) RETURNS TY$NANO_BLANK;

  FUNCTION txn_read_uncommitted RETURNS SMALLINT;
  FUNCTION txn_read_committed RETURNS SMALLINT;
  FUNCTION txn_repeatable_read RETURNS SMALLINT;
  FUNCTION txn_serializable RETURNS SMALLINT;

  FUNCTION isolation_level(
      conn TY$POINTER NOT NULL,
      level_ SMALLINT DEFAULT NULL /* NULL - get usage */
    ) RETURNS SMALLINT;

  FUNCTION connect_(
      conn TY$POINTER NOT NULL,
      attr VARCHAR(512) CHARACTER SET UTF8 NOT NULL,
      user_ VARCHAR(63) CHARACTER SET UTF8 DEFAULT NULL,
      pass VARCHAR(63) CHARACTER SET UTF8 DEFAULT NULL,
      timeout INTEGER NOT NULL DEFAULT 0
    ) RETURNS TY$NANO_BLANK;

  FUNCTION connected(conn TY$POINTER NOT NULL) RETURNS BOOLEAN;

  FUNCTION disconnect_(conn ty$pointer NOT NULL) RETURNS TY$NANO_BLANK;

  FUNCTION transactions(conn TY$POINTER NOT NULL) RETURNS INTEGER;

  FUNCTION get_info(conn TY$POINTER NOT NULL, info_type SMALLINT NOT NULL)
    RETURNS VARCHAR(256) CHARACTER SET UTF8;

  FUNCTION dbms_name(conn ty$pointer NOT NULL) RETURNS VARCHAR(128) CHARACTER SET UTF8;
  FUNCTION dbms_version(conn ty$pointer NOT NULL) RETURNS VARCHAR(128) CHARACTER SET UTF8;
  FUNCTION driver_name(conn TY$POINTER NOT NULL) RETURNS VARCHAR(128) CHARACTER SET UTF8;
  FUNCTION database_name(conn TY$POINTER NOT NULL) RETURNS VARCHAR(128) CHARACTER SET UTF8;
  FUNCTION catalog_name(conn TY$POINTER NOT NULL) RETURNS VARCHAR(128) CHARACTER SET UTF8;

END^

RECREATE PACKAGE BODY NANO$CONN
AS
BEGIN

  FUNCTION connection(
      attr VARCHAR(512) CHARACTER SET UTF8,
      user_ VARCHAR(63) CHARACTER SET UTF8,
      pass VARCHAR(63) CHARACTER SET UTF8,
      timeout INTEGER NOT NULL
    ) RETURNS TY$POINTER
    EXTERNAL NAME 'nano!conn$connection'
    ENGINE UDR;

  FUNCTION valid(conn TY$POINTER NOT NULL) RETURNS BOOLEAN
    EXTERNAL NAME 'nano!conn$valid'
    ENGINE UDR;

  FUNCTION release_(conn TY$POINTER NOT NULL) RETURNS TY$POINTER
    EXTERNAL NAME 'nano!conn$release'
    ENGINE UDR;

  FUNCTION expunge(conn ty$pointer NOT NULL) RETURNS TY$NANO_BLANK
    EXTERNAL NAME 'nano!conn$expunge'
    ENGINE UDR;

  FUNCTION allocate(conn TY$POINTER NOT NULL) RETURNS TY$NANO_BLANK
    EXTERNAL NAME 'nano!conn$allocate'
    ENGINE UDR;

  FUNCTION deallocate(conn TY$POINTER NOT NULL) RETURNS TY$NANO_BLANK
    EXTERNAL NAME 'nano!conn$deallocate'
    ENGINE UDR;

  FUNCTION txn_read_uncommitted RETURNS SMALLINT AS BEGIN RETURN 1; END
  FUNCTION txn_read_committed RETURNS SMALLINT AS BEGIN RETURN 2; END
  FUNCTION txn_repeatable_read RETURNS SMALLINT AS BEGIN RETURN 4; END
  FUNCTION txn_serializable RETURNS SMALLINT AS BEGIN RETURN 8; END

  FUNCTION isolation_level(conn TY$POINTER NOT NULL, level_ SMALLINT) RETURNS SMALLINT
    EXTERNAL NAME 'nano!conn$isolation_level'
    ENGINE UDR;

  FUNCTION connect_(
      conn TY$POINTER NOT NULL,
      attr VARCHAR(512) CHARACTER SET UTF8 NOT NULL,
      user_ VARCHAR(63) CHARACTER SET UTF8,
      pass VARCHAR(63) CHARACTER SET UTF8,
      timeout INTEGER NOT NULL
    ) RETURNS TY$NANO_BLANK
    EXTERNAL NAME 'nano!conn$connect'
    ENGINE UDR;

  FUNCTION connected(
      conn TY$POINTER NOT NULL
    ) RETURNS BOOLEAN
    EXTERNAL NAME 'nano!conn$connected'
    ENGINE UDR;

  FUNCTION disconnect_(conn TY$POINTER NOT NULL) RETURNS TY$NANO_BLANK
    EXTERNAL NAME 'nano!conn$disconnect'
    ENGINE UDR;

  FUNCTION transactions(conn TY$POINTER NOT NULL) RETURNS INTEGER
    EXTERNAL NAME 'nano!conn$transactions'
    ENGINE UDR;

  FUNCTION get_info(conn TY$POINTER NOT NULL, info_type SMALLINT NOT NULL)
    RETURNS VARCHAR(256) CHARACTER SET UTF8
    EXTERNAL NAME 'nano!conn$get_info'
    ENGINE UDR;

  FUNCTION dbms_name(conn TY$POINTER NOT NULL) RETURNS VARCHAR(128) CHARACTER SET UTF8
    EXTERNAL NAME 'nano!conn$dbms_name'
    ENGINE UDR;

  FUNCTION dbms_version(conn TY$POINTER NOT NULL) RETURNS VARCHAR(128) CHARACTER SET UTF8
    EXTERNAL NAME 'nano!conn$dbms_version'
    ENGINE UDR;

  FUNCTION driver_name(conn TY$POINTER NOT NULL) RETURNS VARCHAR(128) CHARACTER SET UTF8
    EXTERNAL NAME 'nano!conn$driver_name'
    ENGINE UDR;

  FUNCTION database_name(conn TY$POINTER NOT NULL) RETURNS VARCHAR(128) CHARACTER SET UTF8
    EXTERNAL NAME 'nano!conn$database_name'
    ENGINE UDR;

  FUNCTION catalog_name(conn TY$POINTER NOT NULL) RETURNS VARCHAR(128) CHARACTER SET UTF8
    EXTERNAL NAME 'nano!conn$catalog_name'
    ENGINE UDR;

END^

SET TERM ; ^

/* Existing privileges on this package */

GRANT EXECUTE ON PACKAGE NANO$CONN TO SYSDBA;
